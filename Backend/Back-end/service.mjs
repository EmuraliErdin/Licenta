import Sequelize from "sequelize";
import generator from "generate-password"
import {Employee, Departament, Request, Access, TemporaryCode, Log, Experience} from "./repository.mjs"
import {sendEmailTo, sortByDate, formatDate} from './utils.mjs'

function valid(Model, payload){
    console.warn(Object);
    return Object.entries(Model.tableAttributes).reduce((valid, [name, field])=>{
    if (valid
        && !field._autoGenerated
        && !field.primaryKey
        && field.allowNull === false
        && !payload[name]) {
            valid = false;
        }
        return valid;
    }, true);
    }
    
    function attributes(request){
        if (request.headers['x-fields']){
            return request.headers['x-fields'].split(',');
        } else {
            return undefined;
        }
    }

    function where(request){
        if(request.query.filter){
           return request.query.filter.split(',').reduce((filter,condition)=>{
                let data = condition.split('-');
                filter[data[0]]={[Sequelize.Op[data[1]]]:data[2]}
                return filter;
            }, {});
        }else {
            return undefined;
        }
    }
    
    //getRecords, postRecord, deleteRecords,
    //getRecord, headRecord, deleteRecord, putRecord, patchRecord
    
    async function getRecords(Model, request, response){
        try{
            let records = await Model.findAll({
                attributes: attributes(request),
                where: where(request)
            });

            if(records.length > 0){
                response.status(200).json(records);
            } else {
                response.status(204).send();
            }
        } catch(error){
            response.status(500).json(error);
        }
    }

    async function postRecord(Model, request, response){
        
        try{
           
            if(valid(Model, request.body)) {
                let record = await Model.create(request.body);
                response.status(201)
                .location(`http://${request.headers.host}${request.baseUrl}${request.url}${request.url.endsWith('/')? '' : '/'}${record.id}`).
                json({message:"Ok"}).send();
    
            }else {
                
                response.status(400).send();
            }
    
        } catch(error){
            console.warn(error);
            response.status(500).json(error);
        }
    }
    
    async function deleteRecords(Model, request, response){
        try{
            await Model.truncate();
            response.status(204).send();
        } catch(error){
            response.status(500).json(error);
        }
    }
    
    async function getRecord(Model, request, response){
        try{
    
            let record = await Model.findByPk(request.params.id);
            if(record){
                response.status(200).json(record);
            }else{
                response.status(404).send();
            }
    
        } catch(error){
            response.status(500).json(error);
        }
    }
    
    async function headRecord(Model, request, response){
        try{
            response.status(await Model.findByPk(request.params.id) ? 204 : 404).send();
        } catch(error){
            response.status(500).json(error);
        }
    }

    async function deleteRecord(Model, request, response){
        try{
            let record = await Model.findByPk(request.params.id);
            if(record){
             await record.destroy();
             response.status(204).send();
        }else{
            response.status(404).send();
        }
        } catch(error){
            response.status(500).json(error);
        }
    }

    async function putRecord(Model, request, response){
        try{
            console.log(request.body);
            let record = await Model.findByPk(request.params.id);
            if(record){
               if(valid(Model, request.body)){
                await record.update(request.body);
                response.status(200).send();
               }
            else{
                response.status(400).send();
            }
        }else{
            response.status(404).send();
        }}
         catch (error){
            response.status(500).json(error);
        }
    }
    
    async function patchRecord(Model, request, response){
        try{
            let record = await Model.findByPk(request.params.id);
            if (record){
                Object.entries(request.body).forEach(([name, value]) => record[name] = value);
                await record.save();
                if(Model==Request){
                    let requestM = record.dataValues
                    if(requestM.status=='ACCEPTED' && requestM.type=='ADD_HOURS'){
                        
                        const xpM = {
                            reason:"Request:ADD_HOURS",
                            createDate : requestM.requestDate,
                            employeeId: requestM.employeeId,
                            xp:(requestM.numberOfHours*20)
                        }
                        let xpRecord = await Experience.create(xpM);
                    }
                    let employee = await Employee.findByPk(requestM.employeeId)
                    let log = {
                        action:`${requestM.status} request for ${employee.dataValues.firstName}  ${employee.dataValues.lastName}`,
                        createDate:formatDate(new Date()),
                        employeeId: request.body.employeeLogId
                    }
                    let logM = await Log.create(log)
                    
                    sendNotificationToEmployee(employee.dataValues.firstName,employee.dataValues.email, requestM.reason, requestM.status)
                }
                response.status(204).send();
                }
             else{
                 response.status(404).send();
             }   
        } catch(error){
            response.status(500).json(error);
        }
    }
    
    async function getChildrenOfParent(Parent,childModelName,request, response) {
        try {
    
            const parent = await Parent.findByPk(request.params.fid)// first id
            if (parent) {   
                let children = '';
                switch(childModelName){
                    case 'employee':
                        children = await parent.getEmployees();
                        break;
                    case 'request':
                        children = await parent.getRequests();
                        break;
                    case 'departament':
                        {
                        children = await parent.getDepartaments();
                        break;
                        }
                    case 'access':
                        children =  await parent.getAccesss();
                        break;
                    case 'log':
                        children = await parent.getLogs();
                        break;
                    case 'experience':
                        children = await parent.getExperiences();
                        break;
                    }
    
                if(children!=='')
                {
                    response.status(200).json(children);
                }
                else{
                    throw new err;
                }
    
            } else {
                response.status(404).send();
            }
        } catch (err) {
            console.warn(err);
            response.status(500).send();
        }
    }
    
    async function postChildOfParent(Parent, parentModelName, Child, request, response) {
        try {
    
            const parent = await Parent.findByPk(request.params.fid)// first id
            if (parent) {   
                let child = request.body;
                switch(childModelName){
                    case 'employee':
                        children = await parent.getEmployees();
                        break;
                    case 'request':
                        children = await parent.getRequests();
                        break;
                    case 'departament':
                        {
                        children = await parent.getDepartaments();
                        break;
                        }
                    case 'access':
                        children =  await parent.getAccesss();
                        break;
                    case 'log':
                        children = await parent.getLogs();
                        break;
                    case 'experience':
                        children = await parent.getExperiences();
                        break;
                }
                await Child.create(child);
                response.status(201).json(child);
            } else {
                response.status(404).send();
            }
        } catch (err) {
            console.warn(err);
            response.status(500).send();
        }
    }
    
    async function getChildOfParent(Parent, childModelName,request,response) {
        try {
            
            const parent = await Parent.findByPk(request.params.fid)// first id
            if (parent) {   
                let children = '';
                switch(childModelName){
                    case 'employee':
                        children = await parent.getEmployees();
                        break;
                    case 'request':
                        children = await parent.getRequests();
                        break;
                    case 'departament':
                        {
                        children = await parent.getDepartaments();
                        break;
                        }
                    case 'access':
                        children =  await parent.getAccesss();
                        break;
                    case 'log':
                        children = await parent.getLogs();
                        break;
                    case 'experience':
                        children = await parent.getExperiences();
                }
                const child = children.shift();
    
                if(child!=='')
                {
                    response.status(200).json(child);
                }
                else{
                    throw new err;
                }
    
            } else {
                response.status(404).send();
            }
        } catch (err) {
            console.warn(err);
            response.status(500).send();
        }
    }
    
    async function deleteChildOfParent(Parent, childModelName,request,response) {
        try {
            
            const parent = await Parent.findByPk(request.params.fid)// first id
            if (parent) {   
                let children = '';
                switch(childModelName){
                    case 'employee':
                        children = await parent.getEmployees();
                        break;
                    case 'request':
                        children = await parent.getRequests();
                        break;
                    case 'departament':
                        {
                        children = await parent.getDepartaments();
                        break;
                        }
                    case 'access':
                        children =  await parent.getAccesss();
                        break;
                    case 'log':
                        children = await parent.getLogs();
                }
    
                const child = children.shift()
    
                if(child){
                    await child.destroy(request.body)
                    response.status(202).json({message:'accepted'})
                }else{
                    response.status(404).json({message:'Child record not found.'})
    
                }
    
            } else {
                response.status(404).send();
            }
        } catch (err) {
            console.warn(err);
            response.status(500).send();
        }
    }
    
    async function putChildOfParent(Parent, childModelName,request,response) {
        try {
            
            const parent = await Parent.findByPk(request.params.fid)// first id
            if (parent) {   
                let children = '';
                switch(childModelName){
                    case 'employee':
                        children = await parent.getEmployees();
                        break;
                    case 'request':
                        children = await parent.getRequests();
                        break;
                    case 'departament':
                        {
                        children = await parent.getDepartaments();
                        break;
                        }
                    case 'access':
                        children =  await parent.getAccesss();
                        break;
                    case 'log':
                        children = await parent.getLogs();
                }
    
                const child = children.shift()
    
                if(child){
                    await child.update(request.body)
                    response.status(202).json({message:'accepted'})
                }else{
                    response.status(404).json({message:'Child record not found.'})
    
                }
    
            } else {
                response.status(404).send();
            }
        } catch (err) {
            console.warn(err);
            response.status(500).send();
        }
    }
    
    async function login(request, response) {
        const loginInfo = request.body;
        const employee  = await Employee.findOne({where:{email:loginInfo.email, password:loginInfo.password}})
        if(employee)
        {
            response.status(200).json(employee);
        
        }
        else
        {
            response.status(404).json({message:"Not found"});
        }
            
    }

    async function changePassword(request,response) {
        try{
            let record = await Employee.findByPk(request.params.id);
            if (record){
                if(request.body.oldPassword == record.dataValues.password)
                {
                    Object.entries(request.body).forEach(([name, value]) => record[name] = value);
                    record["password"]=request.body.newPassword;
                    await record.save();
                    response.status(200).json({message:"Record has been modified!"}).send();
                }
                else{
                    response.status(404).send();
                }
            }
             else{
                 response.status(404).send();
             }   
        } catch(error){
            response.status(500).json(error);
        }


    }

    async function createAccountFirstPart(request,response) {
        try{
            let record = await Employee.findOne({where:{email:request.body.email}});
            let recordTemp = await TemporaryCode.findByPk(request.body.email);
            if(record!=null){
                response.status(400).json({message:"Account already exists"}).send();
                return;
            }
            
            if( recordTemp!=null){
                response.status(200).json({message:"The account already exists for this email or the confirmation email has been sent already."}).send();
            }else{
                
                let randomNumber = Math.floor(1000 + Math.random() * 9000);
                
                const text = "Hello "+request.body.firstName+",\n\n"+
                            "Your verification code is: "+randomNumber+"\n"+
                            "Please don't respond to this email as it is a non-reply email account.\n\n"+
                            "Thank you!\n"+
                            "Emurali Erdin-Alexandru";
                
                sendEmailTo(text,request.body.email,"Account verification")
                
                
                let object = {
                    email:request.body.email,
                    code:randomNumber
                }
                
                const record = await TemporaryCode.create(object);


                setTimeout(async () => {
                    await record.destroy();
                }, 600000);

                response.status(200).json({message:"OK"}).send();
            }
    
        } catch(error){
            response.status(500).json(error);
        }

    }

    async function createAccountSecondPart(request,response) {
        try{
            
            let record = await TemporaryCode.findByPk(request.body.email);

            if(record){
                
                if(request.body.code==record.dataValues.code){
                    
                    postRecord(Employee,request,response);
                }
            }else{
                response.status(404).send();
                
            }
    
        } catch(error){
            response.status(500).json(error);
        }

    }

    async function getRequestsOfDepartment(request, response) {
        try{
            let department = await Departament.findByPk(request.params.id);

            if(department){
                let employees = await Employee.findAll({where:{departmentId:department.dataValues.id}});
                let requests = [];
                
                for(let i=0;i<employees.length;i++){
                    let requestsOfEmployee = await Request.findAll({where:{employeeId:employees[i].dataValues.id}});
                    
                    for(let j=0;j<requestsOfEmployee.length;j++){
                        requestsOfEmployee[j].dataValues.name =employees[i].dataValues.firstName+" "+employees[i].dataValues.lastName;
                        requests.push(requestsOfEmployee[j].dataValues);
                    }
                }
                
                response.status(200).send(sortByDate(requests).reverse());
            }
            else{
                response.status(404).json({message:"Department not found"});
            }


        }catch(error){
            console.warn(error);
            response.status(500).json(error);
        }
    }

    async function setRoleOfEmployee(request,response) {
        try{
            const role = await Access.findOne({where: { givenTo:request.body.givenTo} });
            
            if(role!==null){
                await role.destroy();
            }
            
            if(request.body.type!=="NONE"){
                postRecord(Access,request,response);
            }
  
        } catch(error){
            response.status(500).json(error);
        }

    }

    async function getRoleOfEmployee(request,response) {
        try{
           
            const role = await Access.findOne({where: { givenTo:request.params.fid} });

            if(role!==null) {
                response.status(200).json(role);
            }
            else {
                response.status(404).send();
            }
  
        } catch(error){
            response.status(500).json(error);
        }

    }

    async function getRequestsOfEmployee(request, response) {
        try{
            const parent = await Employee.findByPk(request.params.fid)// first id
            if (parent) {   
                let children = await parent.getRequests();
    
                if(children.length!==0)
                {
                    const sortedRequests = []
                    for(let i=0;i<children.length;i++){
                        sortedRequests.push(children[i].dataValues)
                    }
                    response.status(200).json(sortByDate(sortedRequests).reverse());
                }
                else{
                    throw new err;
                }
    
            } else {
                response.status(404).send();
            }
        } catch (err) {
            console.warn(err);
            response.status(500).send();
        }
    }

    async function forgotPassword(request, response) {

        try{
            const employee = await Employee.findOne({where: { email:request.body.email}});
            
            if(employee) {
                let password = generator.generate({
                    length: 10,
                    numbers: true
                });

                employee["password"]=password;
                await employee.save();
                
                const text = "Hello "+employee.dataValues.firstName+",\n\n"+
                "Your new password is: "+password+"\n"+
                "Please change your password from the profile menu as soon as possible.\n"+
                "Please don't respond to this email as this is a non-reply email account.\n\n"+
                "Thank you!\n"+
                "Emurali Erdin-Alexandru";

                sendEmailTo(text,request.body.email,"Password change")
                response.status(200).json({message:"OK"}).send();
            }
            else {
                response.status(404).send();
            }
  
        } catch(error){
            response.status(500).json(error);
        }
    }

    async function getFreeHoursOfYear(request, response){
        const year = request.params.year;
        const departmentId = request.params.departmentId;
        let requestList=[];
        let employees =  await Employee.findAll({where:{departmentId: departmentId}});
        for(let employee of employees){
            let requests = await Request.findAll({where:{employeeId:employee.dataValues.id}});
            for(let request of requests){
                requestList.push(request.dataValues)
            }
        }

        let listToSend = new Array(12).fill(0);

        for(let request of requestList){
            let currDate = new Date(request.requestDate)
            if(new Date(currDate).getFullYear()==year){
                listToSend[currDate.getMonth()-1] = listToSend[currDate.getMonth()-1]+ request.numberOfHours;
            }
        }
        response.status(200).json(listToSend)
        
    }

    function sendNotificationToEmployee(name, email, reason, requestResponse){
        try{


                const text = "Hello "+name+",\n\n"+
                `You have a new notification regarding your pending request (request has the following reason:  ${reason})\n`+
                `Your request has been ${requestResponse}.\n`+
                "Please don't respond to this email as this is a non-reply email account.\n\n"+
                "Thank you!\n"+
                "Emurali Erdin-Alexandru";

                sendEmailTo(text, email,"Notification regarding request")
  
        } catch(error){
            response.status(500).json(error);
        }
    }
    
    export {
        getRecords, postRecord, deleteRecords,
        getRecord, headRecord, deleteRecord, putRecord, patchRecord, 
        getChildrenOfParent, postChildOfParent,
        getChildOfParent, deleteChildOfParent, putChildOfParent, login,
        changePassword, createAccountFirstPart, createAccountSecondPart, getRequestsOfDepartment,
        setRoleOfEmployee, getRoleOfEmployee,forgotPassword, getRequestsOfEmployee, getFreeHoursOfYear,
        sendNotificationToEmployee
    }
    